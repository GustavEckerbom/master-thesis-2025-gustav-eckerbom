// board_gpio_handles.cpp
#include "board_gpio_handles.h"
#include "board_gpio_drivers.h"

// LEDs
ARM_DRIVER_GPIO *BOARD_LED_TOP_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_LED_TOP_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_LED_BOT_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_LED_BOT_GPIO_PORT);

// IO header
ARM_DRIVER_GPIO *BOARD_IOHEADER_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_GPIO_PINHEAD_GPIO_PORT);

// Camera misc
ARM_DRIVER_GPIO *BOARD_CAM_TRIG_IN_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_TRIG_IN_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_DGPIO_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_DGPIO_GPIO_PORT);

// Camera ULP
ARM_DRIVER_GPIO *BOARD_CAM_ULP_ENB_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_ULP_ENB_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_ULP_TH_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_ULP_TH_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_ULP_RST_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_ULP_RSTN_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_ULP_WAKEUP_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_ULP_WAKEUP_GPIO_PORT);

// Camera reset / tx disable
ARM_DRIVER_GPIO *BOARD_CAM_RESET_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_RSTN_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_PXRSTN_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_PXRSTN_GPIO_PORT);

// Camera power enables
ARM_DRIVER_GPIO *BOARD_CAM_PSU_EN_1V1_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_PSU_EN_1V1_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_PSU_EN_1V8_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_PSU_EN_1V8_GPIO_PORT);
ARM_DRIVER_GPIO *BOARD_CAM_PSU_EN_2V5_GPIO_GPIOdrv =
    &ARM_Driver_GPIO_(BOARD_CAM_PSU_EN_2V5_GPIO_PORT);

ARM_DRIVER_GPIO *BOARD_USER_BUTTON_GPIO_GPIOdrv = 
    &ARM_Driver_GPIO_(BOARD_USER_PUSH_GPIO_PORT);

#ifdef BOARD_VSYNC_INTERRUPT_GPIO_PORT
ARM_DRIVER_GPIO *VSYNC_GPIO_drv =
    &ARM_Driver_GPIO_(BOARD_VSYNC_INTERRUPT_GPIO_PORT);

#endif
